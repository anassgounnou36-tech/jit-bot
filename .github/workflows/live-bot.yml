name: Live Bot - Short Run Test

on:
  workflow_dispatch:
    inputs:
      duration_seconds:
        description: 'Duration to run the bot (seconds)'
        required: false
        default: 180
        type: number
      execution_mode:
        description: 'Execution mode'
        required: false
        default: 'ts-node'
        type: choice
        options:
          - 'ts-node'
          - 'compiled'
      log_level:
        description: 'Log level'
        required: false
        default: 'info'
        type: choice
        options:
          - 'debug'
          - 'info'
          - 'warn'
      bot_command:
        description: 'Bot command to execute'
        required: false
        default: 'start'
        type: choice
        options:
          - 'start'
          - 'status'
      fork_preflight:
        description: 'Enable fork simulation preflight (high memory usage)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      memory_guard_mb:
        description: 'Memory guard limit in MB (protects against OOM)'
        required: false
        default: '5600'
        type: string
      debug_options:
        description: 'Debug options (comma-separated): heap,trace-gc,none'
        required: false
        default: 'heap'
        type: string
      artifact_timeout_minutes:
        description: 'Artifact upload timeout in minutes'
        required: false
        default: 3
        type: number
      artifact_compression_level:
        description: 'Artifact compression level (0-9)'
        required: false
        default: 6
        type: number

concurrency:
  group: live-bot-run
  cancel-in-progress: true

jobs:
  live-bot-test:
    name: Run Live Bot for Limited Time
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Parse debug options
        id: parse-debug
        run: |
          raw="${{ inputs.debug_options }}"
          echo "Parsing debug options: $raw"
          
          # Initialize defaults
          enable_heap="false"
          trace_gc="false"
          
          # Parse comma-separated values
          IFS=',' read -ra options <<< "$raw"
          for option in "${options[@]}"; do
            option=$(echo "$option" | xargs)  # trim whitespace
            case "$option" in
              heap) enable_heap="true" ;;
              trace-gc) trace_gc="true" ;;
              none) ;;
              *) echo "⚠️  Unknown debug option: $option (ignoring)" ;;
            esac
          done
          
          # Set environment variables
          echo "ENABLE_HEAP_SNAPSHOT=$enable_heap" >> $GITHUB_ENV
          echo "TRACE_GC=$trace_gc" >> $GITHUB_ENV
          
          echo "✅ Debug options parsed -> heap=$enable_heap trace-gc=$trace_gc"

      - name: Validate duration
        run: |
          duration=${{ inputs.duration_seconds }}
          max_duration=900
          override_long_run="${{ vars.OVERRIDE_LONG_RUN }}"
          
          echo "🔍 Validating duration: ${duration}s"
          echo "   Max allowed: ${max_duration}s"
          echo "   Override enabled: ${override_long_run}"
          
          if [ "$duration" -gt "$max_duration" ] && [ "$override_long_run" != "true" ]; then
            echo "❌ SAFETY: Duration ${duration}s exceeds maximum ${max_duration}s"
            echo "   To allow longer runs, set repository variable OVERRIDE_LONG_RUN='true'"
            exit 1
          fi
          
          if [ "$duration" -gt "$max_duration" ]; then
            echo "⚠️  OVERRIDE: Running for ${duration}s (exceeds default maximum)"
          else
            echo "✅ Duration ${duration}s is within safety limits"
          fi

      - name: Install dependencies
        run: npm ci

      - name: Preflight checks - Required secrets
        run: |
          echo "🔍 Checking required secrets..."
          if [ -z "${{ secrets.RPC_URL_HTTP }}" ]; then
            echo "❌ CRITICAL: RPC_URL_HTTP secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PRIVATE_KEY }}" ]; then
            echo "❌ CRITICAL: PRIVATE_KEY secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.ETHERSCAN_API_KEY }}" ]; then
            echo "❌ CRITICAL: ETHERSCAN_API_KEY secret is not set"
            exit 1
          fi
          echo "✅ All required secrets are present"

      - name: Preflight checks - Safety toggles
        run: |
          echo "🔒 Checking safety toggles..."
          if [ "${{ vars.I_UNDERSTAND_LIVE_RISK }}" != "true" ]; then
            echo "❌ SAFETY: I_UNDERSTAND_LIVE_RISK must be set to 'true' in repository variables"
            exit 1
          fi
          if [ "${{ vars.CONFIRM_MAINNET }}" != "true" ]; then
            echo "❌ SAFETY: CONFIRM_MAINNET must be set to 'true' in repository variables"
            exit 1
          fi
          echo "✅ Safety toggles confirmed"

      - name: Environment summary
        run: |
          echo "🔧 Environment Configuration Summary:"
          echo "   Duration: ${{ inputs.duration_seconds }} seconds"
          echo "   Mode: ${{ inputs.execution_mode }}"
          echo "   Log Level: ${{ inputs.log_level }}"
          echo "   Bot Command: ${{ inputs.bot_command }}"
          echo "   Fork Preflight: ${{ inputs.fork_preflight }}"
          echo "   Memory Guard: ${{ inputs.memory_guard_mb }}MB"
          echo "   Debug Options: ${{ inputs.debug_options }}"
          echo "   Heap Snapshots: $ENABLE_HEAP_SNAPSHOT"
          echo "   GC Tracing: $TRACE_GC"
          echo "   Job Timeout: (managed internally)"
          echo "   Artifact Timeout: ${{ inputs.artifact_timeout_minutes }} minutes"
          echo "   Artifact Compression: Level ${{ inputs.artifact_compression_level }}"
          echo ""
          echo "🔐 Configured Secrets (masked):"
          echo "   RPC_URL_HTTP: ***"
          echo "   RPC_URL_WS: $( [ -n '${{ secrets.RPC_URL_WS }}' ] && echo '***' || echo 'Not set')"
          echo "   PRIVATE_KEY: ***"
          echo "   FLASHBOTS_SIGNING_KEY: $( [ -n '${{ secrets.FLASHBOTS_SIGNING_KEY }}' ] && echo '***' || echo 'Not set')"
          echo "   FLASHBOTS_RELAY_URL: $( [ -n '${{ secrets.FLASHBOTS_RELAY_URL }}' ] && echo '***' || echo 'Not set')"
          echo "   ETHERSCAN_API_KEY: ***"
          echo "   BLOCKNATIVE_API_KEY: $( [ -n '${{ secrets.BLOCKNATIVE_API_KEY }}' ] && echo '***' || echo 'Not set')"

      - name: Compile TypeScript (if needed)
        if: inputs.execution_mode == 'compiled'
        timeout-minutes: 5
        run: |
          echo "🔨 Compiling TypeScript..."
          npm run build
          if [ ! -f "dist/src/bot/index.js" ]; then
            echo "Fallback tsc..."
            npx tsc -p tsconfig.json
          fi
          if [ ! -f "dist/src/bot/index.js" ]; then
            echo "❌ dist/src/bot/index.js not produced"
            exit 1
          fi

      - name: Prepare bot execution
        run: |
          NODE_OPTIONS_BASE="--max-old-space-size=6144"
          if [ "$ENABLE_HEAP_SNAPSHOT" = "true" ]; then
            NODE_OPTIONS_BASE="$NODE_OPTIONS_BASE --heapsnapshot-near-heap-limit=1"
          fi
          if [ "$TRACE_GC" = "true" ]; then
            NODE_OPTIONS_BASE="$NODE_OPTIONS_BASE --trace-gc"
          fi
          echo "NODE_OPTIONS_FINAL=$NODE_OPTIONS_BASE" >> $GITHUB_ENV
          if [ "${{ inputs.execution_mode }}" = "compiled" ]; then
            BOT_CMD="npm run start -- ${{ inputs.bot_command }}"
          else
            BOT_CMD="npm run live -- ${{ inputs.bot_command }}"
          fi
          echo "BOT_CMD=$BOT_CMD" >> $GITHUB_ENV
          echo "Prepared command: $BOT_CMD"

      - name: Start live bot with memory guard and timeout
        id: start-live-bot-with-timeout
        run: |
          echo "🚀 Starting bot for ${{ inputs.duration_seconds }} seconds"
          mkdir -p live-bot-logs
          chmod +x .github/scripts/run-with-memory-guard.sh
          timeout --foreground --kill-after=30 --signal=TERM ${{ inputs.duration_seconds }}s \
            ./.github/scripts/run-with-memory-guard.sh ${{ inputs.memory_guard_mb }} \
            $BOT_CMD 2>&1 | tee live-bot-logs/bot-output.log || {
              ec=$?
              if [ $ec -eq 124 ]; then
                echo "⏰ Reached run duration limit"
                exit 0
              elif [ $ec -eq 137 ]; then
                echo "⏰ Killed after grace period"
                exit 0
              elif [ $ec -eq 0 ]; then
                echo "Exited cleanly"
                exit 0
              else
                echo "❌ Bot exited with code $ec"
                exit $ec
              fi
            }
          if [ "$ENABLE_HEAP_SNAPSHOT" = "true" ]; then
            if ls *.heapsnapshot 1>/dev/null 2>&1; then
              mv *.heapsnapshot live-bot-logs/ || true
            fi
          fi
        env:
          NODE_ENV: production
          LOG_LEVEL: ${{ inputs.log_level }}
          NODE_OPTIONS: ${{ env.NODE_OPTIONS_FINAL }}
          ENABLE_FORK_SIM_PREFLIGHT: ${{ inputs.fork_preflight }}
          RPC_URL_HTTP: ${{ secrets.RPC_URL_HTTP }}
          RPC_URL_WS: ${{ secrets.RPC_URL_WS }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          FLASHBOTS_SIGNING_KEY: ${{ secrets.FLASHBOTS_SIGNING_KEY }}
          FLASHBOTS_RELAY_URL: ${{ secrets.FLASHBOTS_RELAY_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          BLOCKNATIVE_API_KEY: ${{ secrets.BLOCKNATIVE_API_KEY }}
          SIMULATION_MODE: ${{ vars.SIMULATION_MODE }}
          ENABLE_FLASHBOTS: ${{ vars.ENABLE_FLASHBOTS }}
          MAX_FLASHLOAN_AMOUNT_USD: ${{ vars.MAX_FLASHLOAN_AMOUNT_USD }}
          GLOBAL_MIN_PROFIT_USD: ${{ vars.GLOBAL_MIN_PROFIT_USD }}
          MAX_GAS_GWEI: ${{ vars.MAX_GAS_GWEI }}
          BUNDLE_GAS_LIMIT: ${{ vars.BUNDLE_GAS_LIMIT }}
          POOL_MAX_FAILURES: ${{ vars.POOL_MAX_FAILURES }}
          POOL_COOLDOWN_MS: ${{ vars.POOL_COOLDOWN_MS }}
          REQUIRE_RAW_TX_HEX: ${{ vars.REQUIRE_RAW_TX_HEX }}
          ONE_BUNDLE_PER_BLOCK: ${{ vars.ONE_BUNDLE_PER_BLOCK }}
          I_UNDERSTAND_LIVE_RISK: ${{ vars.I_UNDERSTAND_LIVE_RISK }}
          CONFIRM_MAINNET: ${{ vars.CONFIRM_MAINNET }}

      - name: Upload bot logs and artifacts
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        timeout-minutes: 5
        with:
          name: live-bot-logs-${{ github.run_number }}
          path: |
            live-bot-logs/bot-output.log
            live-bot-logs/*.heapsnapshot
          if-no-files-found: ignore
          retention-days: 7
          compression-level: ${{ inputs.artifact_compression_level }}

      - name: Run summary
        if: always()
        run: |
          heap_snapshot_produced="false"
          if [ "$ENABLE_HEAP_SNAPSHOT" = "true" ] && ls live-bot-logs/*.heapsnapshot 1>/dev/null 2>&1; then
            heap_snapshot_produced="true"
          fi
          echo "## 🤖 Live Bot Test Results" >> $GITHUB_STEP_SUMMARY
          echo "**Duration:** ${{ inputs.duration_seconds }}s" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${{ inputs.execution_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Command:** ${{ inputs.bot_command }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fork Preflight:** ${{ inputs.fork_preflight }}" >> $GITHUB_STEP_SUMMARY
          echo "**Memory Guard:** ${{ inputs.memory_guard_mb }}MB" >> $GITHUB_STEP_SUMMARY
          echo "**Debug Options:** ${{ inputs.debug_options }}" >> $GITHUB_STEP_SUMMARY
          echo "**Job Timeout:** (managed internally)" >> $GITHUB_STEP_SUMMARY
          echo "**Artifact Timeout:** ${{ inputs.artifact_timeout_minutes }}m" >> $GITHUB_STEP_SUMMARY
          echo "**Artifact Compression:** ${{ inputs.artifact_compression_level }}" >> $GITHUB_STEP_SUMMARY
          echo "**Heap Snapshot Produced:** $heap_snapshot_produced" >> $GITHUB_STEP_SUMMARY
          echo "**GC Tracing:** $TRACE_GC" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.start-live-bot-with-timeout.outcome }}" = "success" ]; then
            echo "**Result:** ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Result:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Log Artifact:** live-bot-logs-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Safety Notice" >> $GITHUB_STEP_SUMMARY
          echo "Real funds risk; ensure variables and limits are correct." >> $GITHUB_STEP_SUMMARY
