name: E2E Tests and Static Analysis

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  e2e-simulation:
    name: E2E Fork Simulation Tests
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: test
      FORK_BLOCK: auto
      ENABLE_LIVE_EXECUTION: false
      ENABLE_FLASHBOTS: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate test fixtures (if needed)
      run: |
        if [ ! -f "reports/fixture-USDC-WETH-0.3%-18500000.json" ]; then
          echo "Generating test fixtures..."
          node scripts/generate-fixtures.js || echo "Using static fixtures"
        fi
      env:
        MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
        
    - name: Run E2E fork simulation tests
      run: npm run test:fork
      timeout-minutes: 10
      
    - name: Run unit tests for flashloan orchestrator
      run: npm run test:unit -- --grep "Flashloan Orchestrator"
      
    - name: Validate test fixtures
      run: |
        echo "Validating fixture files..."
        for file in reports/fixture-*.json; do
          if [ -f "$file" ]; then
            echo "✓ Found fixture: $file"
            # Basic JSON validation
            node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8'))" || exit 1
          fi
        done
        
    - name: Upload simulation reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: simulation-reports
        path: reports/
        retention-days: 7

  static-analysis:
    name: Solidity Static Analysis
    runs-on: ubuntu-latest
    
    env:
      ENABLE_SLITHER: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Python for Slither
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Slither
      run: |
        python -m pip install --upgrade pip
        pip install slither-analyzer
        
    - name: Install Solidity compiler
      run: |
        # Install solc for Slither
        sudo add-apt-repository ppa:ethereum/ethereum
        sudo apt-get update
        sudo apt-get install solc
        
    - name: Run Slither analysis
      run: |
        echo "Running Slither static analysis..."
        if command -v slither &> /dev/null; then
          slither contracts/ --json slither-report.json || echo "Slither found issues (non-critical)"
          echo "Slither analysis completed"
        else
          echo "Slither not available, skipping static analysis"
          echo "⚠️ To enable Slither in your environment, install it with: pip install slither-analyzer"
        fi
        
    - name: Upload Slither report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: slither-report
        path: slither-report.json
        retention-days: 7
        
    - name: Run TypeScript linting
      run: npm run lint
      
    - name: Check for security issues in dependencies
      run: npm audit --audit-level moderate

  validate-bundle-ordering:
    name: Validate Bundle Ordering
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test bundle creation with victim transactions
      run: |
        echo "Testing bundle ordering validation..."
        npm run test:unit -- --grep "Flashbots.*bundle"
        
    - name: Validate fixture victim transactions
      run: |
        echo "Validating victim transaction format in fixtures..."
        node -e "
          const fs = require('fs');
          const path = require('path');
          const reportsDir = 'reports';
          
          if (fs.existsSync(reportsDir)) {
            const fixtures = fs.readdirSync(reportsDir)
              .filter(f => f.startsWith('fixture-') && f.endsWith('.json'));
            
            fixtures.forEach(file => {
              const fixture = JSON.parse(fs.readFileSync(path.join(reportsDir, file), 'utf8'));
              
              console.log(\`Validating \${file}...\`);
              
              if (!fixture.victimTransaction) {
                throw new Error(\`Missing victimTransaction in \${file}\`);
              }
              
              if (!fixture.victimTransaction.rawTx) {
                throw new Error(\`Missing rawTx in \${file}\`);
              }
              
              if (!fixture.victimTransaction.hash) {
                throw new Error(\`Missing hash in \${file}\`);
              }
              
              console.log(\`✓ \${file} is valid\`);
            });
            
            console.log(\`All \${fixtures.length} fixtures are valid\`);
          } else {
            console.log('No reports directory found, skipping validation');
          }
        "

  summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-simulation, static-analysis, validate-bundle-ordering]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "=== E2E Test Summary ==="
        echo "E2E Simulation: ${{ needs.e2e-simulation.result }}"
        echo "Static Analysis: ${{ needs.static-analysis.result }}"
        echo "Bundle Validation: ${{ needs.validate-bundle-ordering.result }}"
        
        if [[ "${{ needs.e2e-simulation.result }}" == "success" && 
              "${{ needs.static-analysis.result }}" == "success" && 
              "${{ needs.validate-bundle-ordering.result }}" == "success" ]]; then
          echo "✅ All E2E tests passed!"
          echo "The project is ready for production hardening merge."
        else
          echo "❌ Some E2E tests failed."
          echo "Please review the failed jobs before merging."
          exit 1
        fi